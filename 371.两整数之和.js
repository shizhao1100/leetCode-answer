/*
 * @lc app=leetcode.cn id=371 lang=javascript
 *
 * [371] 两整数之和
 */

// @lc code=start
/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */

/** 
 * 方法：位运算
 * 5 + 4 等价 = 9
 * 0 1 0 1
 * 0 1 0 0
 * =
 * 1 0 0 1
 */

// 在位运算操作中，异或的一个重要特性是无进位加法。我们来看一个例子：
// a = 5 = 0101
// b = 4 = 0100
// a ^ b
/** 
 * 0 1 0 1
 * 0 1 0 0
 * -------
 * 0 0 0 1
 */

// a ^ b 得到了一个无进位加法结果，如果要得到 a + b 的最终值，我们还要找到进位的数，把这二者相加

//在位运算中，我们可以使用 与 操作获得进位：

// a = 5 = 0101
// b = 4 = 0100
// a & b

/** 
 * 0 1 0 1
 * 0 1 0 0
 * -------
 * 0 1 0 0
 */

// 由计算结果可见，0100 并不是我们想要的进位，1 + 1 所获得的进位应该要放置在它的更高位。
// 即左侧位上，因此我们还要把 0100 左移一位，才是我们所要的进位结果。

var getSum = function(a, b) {
	while (b != 0) {
		let temp = a ^ b;
		b = (a & b) << 1;
		a = temp;
	}
	return a;
};
// @lc code=end
